" Generic configuration
syntax on
set nocompatible
set number
set ruler
set encoding=utf-8 " Necessary to show Unicode glyphs
"set clipboard=unnamed,unnamedplus
"set shellcmdflag=-ic
set shell=/bin/zsh
set exrc " https://andrew.stwrt.ca/posts/project-specific-vimrc/

" Start Plug
filetype off
call plug#begin('~/.vim/plugged')

" UI
Plug 'vim-airline/vim-airline' " Status Line
Plug 'scrooloose/nerdtree' " Tree Explorer
Plug 'Rigellute/shades-of-purple.vim' " Color Scheme

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'mileszs/ack.vim'
Plug 'bumaociyuan/vim-matchit'
Plug 'scrooloose/nerdcommenter'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

Plug 'janko/vim-test'
Plug 'skywind3000/asyncrun.vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-rails'
Plug 't9md/vim-ruby-xmpfilter'
Plug 'vim-ruby/vim-ruby'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-surround'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'mattn/emmet-vim'
Plug 'vim-syntastic/syntastic'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'jelera/vim-javascript-syntax'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'tpope/vim-unimpaired'

call plug#end()

filetype indent plugin on
" End Plug

" reload the vimrc when changed
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost ~/dotfiles/vim/vimrc source %

" remap the leader key
let mapleader=','

" Whitespace and tabs
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
" set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set textwidth=0
set wrapmargin=0
set cursorline
set colorcolumn=132

" Folding
" set foldmethod=syntax
" set foldnestmax=3
" set foldlevelstart=20

" Setup splitting where I want it
set splitbelow
set splitright

" Searching
"set hlsearch    " highlisht matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter
"nnoremap <silent> <F3> :nohlsearch<CR>

nnoremap <Leader>sw /<C-R>=expand('<cword>')<CR><CR>
nnoremap <Leader>sd /def <C-R>=expand('<cword>')<CR><CR>

" allow for %% to be the path of the current file
cabbr <expr> %% expand('%:p:h')

" Get the mouse working on terminal vim
" set ttyfast
" set mouse=a
" set ttymouse=xterm2

" Syntax formatting
nmap <silent> <C-c>= mtgg<S-v><S-g>='t<CR>

" Splits navigation
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" NERDCommenter
let g:NERDSpaceDelims = 1

" Configure buffergator
nnoremap <silent> <C-c>p :BuffergatorMruCyclePrev<CR>
nnoremap <silent> <C-c>n :BuffergatorMruCycleNext<CR>

" Configure NERDTree
nmap <leader>n :NERDTreeToggle<CR>
nmap <leader>fn :NERDTreeFind<CR>
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$', 'tags', '\.idea', '\.swp$']
let NERDTreeShowHidden=1
let NERDTreeWinSize=45

" Configure Shades of purple
"""" enable 24bit true color
" If you have vim >=8.0 or Neovim >= 0.1.5
if (has("termguicolors"))
 set termguicolors
endif

"""" enable the theme
syntax enable
colorscheme shades_of_purple

" to make gitgutter work with solarized
highlight clear SignColumn
call gitgutter#highlight#define_highlights()

" Configure vim-airline
let g:shades_of_purple_airline = 1
let g:airline_theme="shades_of_purple"
let g:airline_powerline_fonts=1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline_section_b = airline#section#create(['branch'])
let g:airline_section_y = airline#section#create([''])
let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', '%3v'])

" Configure vim test
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
" let g:test#ruby#rspec#executable = 'docker-compose exec web bin/rspec'
" let test#strategy = "vimterminal"
let g:test#strategy = "dispatch"

" Configure vim-tmuxline
let g:tmuxline_theme='iceberg'

" Configure vim-fugitive
nmap <silent> <leader>gb :Gblame<CR>
nmap <silent> <leader>gs :Gstatus<CR>
nmap <silent> <leader>gd :Gdiff<CR>
nmap <silent> <leader>gl :Glog<CR>
nmap <silent> <leader>gc :Gcommit<CR>
nmap <silent> <leader>gca :Gcommit -a<CR>
nmap <silent> <leader>gp :Gpush origin HEAD<CR>
nmap <silent> <leader>gpf :Gpush --force origin HEAD<CR>

" Configure vim-syntastic
let g:syntastic_enable_signs=1
"let g:syntastic_quiet_messages={'level': 'warnings'}
let g:syntastic_auto_loc_list=2

" Configure vim-ctrlp (not currently in use)
let g:ctrlp_custom_ignore = {
            \ 'dir': '\.git$\|node_modules$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$'
            \ }

let g:ctrlp_extensions = ['tag']

" Configure vimux
" map <Leader>vp :VimuxPromptCommand<CR>
" map <Leader>vl :VimuxRunLastCommand<CR>
" map <Leader>vi :VimuxInspectRunner<CR>
" map <Leader>vq :VimuxCloseRunner<CR>

" Configure Ack
" nnoremap <leader>a :Ack!
" nnoremap <leader>u :Ack! <C-R>=expand('<cword>')<CR><CR>
" let g:ack_default_options = " -s -H --nocolor --nogroup --column --ignore-dir=tmp --ignore-dir=coverage --ignore-dir=log --ignore-dir=node_modules --ignore-dir=\.idea --ignore-file=is:tags"

" Configure file types
autocmd BufNewFile,BufRead *.ejs set filetype=html
autocmd BufNewFile,BufReadPost *.jade set filetype=jade
autocmd BufNewFile,BufReadPost *.jade set filetype=jade

" Setup ignores (Taken from https://github.com/carlhuda/janus)
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

" Backup and swap files
set backupdir^=~/.vim/_backup//    " where to put backup files.
set directory^=~/.vim/_temp//      " where to put swap files.

" Plug Config
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> vgd :call CocAction('jumpDefinition', 'vsplit')<CR>
nmap <silent> sgd :call CocAction('jumpDefinition', 'split')<CR>
nmap <silent> tgd :call CocAction('jumpDefinition', 'tabe')<CR>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" End Plug config

set secure " https://andrew.stwrt.ca/posts/project-specific-vimrc/
