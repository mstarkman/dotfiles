" Generic configuration
syntax on
set nocompatible
set number
set ruler
set encoding=utf-8 " Necessary to show Unicode glyphs
set shell=/bin/zsh
set exrc " https://andrew.stwrt.ca/posts/project-specific-vimrc/

" Start Plug
call plug#begin('~/.vim/plugged')

" UI
Plug 'vim-airline/vim-airline' " Status Line
Plug 'scrooloose/nerdtree' " Tree Explorer
Plug 'Rigellute/shades-of-purple.vim' " Color Scheme

" File finding
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Coding General
Plug 'scrooloose/nerdcommenter'
Plug 'vim-syntastic/syntastic'
Plug 'kana/vim-textobj-user'
Plug 'chrisbra/matchit'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'tpope/vim-rails'

call plug#end()
" End Plug

" reload the vimrc when changed
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost ~/dotfiles/vim/vimrc source %

" remap the leader key
let mapleader=','

" Splits navigation
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Whitespace and tabs
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
" set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set textwidth=0
set wrapmargin=0
set cursorline
set colorcolumn=132

" Folding
" set foldmethod=syntax
" set foldnestmax=3
" set foldlevelstart=20

" Setup splitting where I want it
set splitbelow
set splitright

" Searching
"set hlsearch    " highlisht matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" Configure Shades of purple
" enable 24bit true color
" If you have vim >=8.0 or Neovim >= 0.1.5
if (has("termguicolors"))
  set termguicolors
endif

" enable the theme
syntax enable
colorscheme shades_of_purple

" allow background terminal color to come through
highlight Normal guibg=NONE ctermbg=NONE
highlight nonText ctermbg=NONE
highlight clear LineNr
highlight CursorLine guibg=NONE
highlight clear SignColumn

" Configure vim-airline
let g:shades_of_purple_airline = 1
let g:airline_theme="shades_of_purple"
let g:airline_powerline_fonts=1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline_section_b = airline#section#create(['branch'])
let g:airline_section_y = airline#section#create([''])
let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', '%3v'])

" Configure vim-fugitive
nmap <silent> <leader>gb :Git blame<CR>
nmap <silent> <leader>gs :Git<CR>
nmap <silent> <leader>gd :Gdiff<CR>
nmap <silent> <leader>gl :Gclog<CR>
nmap <silent> <leader>gc :Gcommit<CR>
nmap <silent> <leader>gca :Gcommit -a<CR>
nmap <silent> <leader>gp :Gpush origin HEAD<CR>
nmap <silent> <leader>gpf :Gpush --force origin HEAD<CR>

" Configure NERDTree
nmap <leader>n :NERDTreeToggle<CR>
nmap <leader>fn :NERDTreeFind<CR>
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$', 'tags', '\.idea', '\.swp$']
let NERDTreeShowHidden=1
let NERDTreeWinSize=45

" NERDCommenter
let g:NERDSpaceDelims = 1

" GitGutter
call gitgutter#highlight#define_highlights()

set secure " https://andrew.stwrt.ca/posts/project-specific-vimrc/

" SnipMate
let g:snipMate = { 'snippet_version' : 1 }

" Tab management for VS Code
" switch tabs (same as gt & gT)
nnoremap <C-j> :tabprevious<CR>
nnoremap <C-k> :tabnext<CR>

" (bonus) move tabls right or left
map <C-h> :execute "tabmove" tabpagenr() - 2 <CR>
map <C-l> :execute "tabmove" tabpagenr() + 1 <CR>

